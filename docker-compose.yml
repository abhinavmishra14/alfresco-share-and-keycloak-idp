# This docker-compose file will spin up an ACS cluster on a local host or on a server and it requires a minimum of 12GB Memory to distribute among containers.
# Limit container memory and assign X percentage to JVM.  There are couple of ways to allocate JVM Memory for ACS Containers
# For example: 'JAVA_OPTS: "$JAVA_OPTS -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"'
# See Oracle docs (https://docs.oracle.com/javase/9/gctuning/parallel-collector1.htm#JSGCT-GUID-CAB83393-3438-44ED-98F0-D15641B43C7D).
# If the container memory is not explicitly set then the flags above will set the max heap default to 1/4 of the container's memory, which may not be ideal.
# For performance tuning, assign the container memory and give a percentage of it to the JVM.

# Using version 2 as 3 does not support resource constraint options (cpu_*, mem_* limits) for non swarm mode in Composeversion: "2"

services:
    alfresco:
        build:
          context: ./docker_image_build_cfg/alfresco
          args:
            ACS_TAG: ${ACS_TAG}
        image: alfresco
        container_name: alfresco
        mem_limit: 2g
        depends_on:
            - keycloak
            - postgres
        environment:
            JAVA_TOOL_OPTIONS: "
                -Dencryption.keystore.type=JCEKS
                -Dencryption.cipherAlgorithm=DESede/CBC/PKCS5Padding
                -Dencryption.keyAlgorithm=DESede
                -Dencryption.keystore.location=/usr/local/tomcat/shared/classes/alfresco/extension/keystore/keystore
                -Dmetadata-keystore.password=mp6yc0UD9e
                -Dmetadata-keystore.aliases=metadata
                -Dmetadata-keystore.metadata.password=oKIWzVdEdA
                -Dmetadata-keystore.metadata.algorithm=DESede
                "
            JAVA_OPTS : '
                -Ddb.username=alfresco
                -Ddb.password=alfresco
                -Ddb.driver=org.postgresql.Driver
                -Ddb.url=jdbc:postgresql://postgres:5432/alfresco
                -Dsolr.host=solr6
                -Dsolr.port=8983
                -Dsolr.secureComms=secret
                -Dsolr.sharedSecret=secret
                -Dsolr.base.url=/solr
                -Dindex.subsystem.name=solr6
                -Dalfresco.host=${HOST_NAME}
                -Dalfresco.port=8080
                -Dalfresco.protocol=http
                -Dshare.host=${HOST_NAME}
                -Dshare.port=8080
                -Dshare.protocol=http
                -Daos.baseUrlOverwrite=http://${HOST_NAME}/alfresco/aos
                -Dmessaging.broker.url="failover:(nio://activemq:61616)?timeout=3000&jms.useCompression=true"
                -Ddeployment.method=DOCKER_COMPOSE
                -Dcsrf.filter.enabled=false
                -Dopencmis.server.override=true
                -Dopencmis.server.value=http://${HOST_NAME}:8080
                -DlocalTransform.core-aio.url=http://transform-core-aio:8090/
                -Dcsrf.filter.enabled=false
                -Dalfresco.restApi.basicAuthScheme=true
                -Dauthentication.protection.enabled=false
                -XX:+UseG1GC -XX:+UseStringDeduplication
                -Dgoogledocs.enabled=false
                -Xms6976m -Xmx6976m
                -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80
                -Dauthentication.chain=identity-service1:identity-service,alfrescoNtlm1:alfrescoNtlm
                -Didentity-service.enable-basic-auth=true
                -Didentity-service.auth-server-url=http://keycloak:8080
                -Didentity-service.realm=alfresco
                -Didentity-service.resource=alfresco
                -Didentity-service.authentication.validation.failure.silent=false
                -Didentity-service.authentication.enabled=true
              '
        volumes:
          #Bind mount SHORT SYNTAX - [SOURCE:]TARGET[:MODE]
          #SOURCE can be a named volume or a (relative or absolute) path on the host system. 
          #TARGET is an absolute path in the container where the volume is mounted. 
          #MODE is a mount option which can be read-only (ro) or read-write (rw) (default).
          #Example: ./data/alfresco/alf_data:/usr/local/tomcat/alf_data/:rw
          - ./data/alfresco/alf_data:/usr/local/tomcat/alf_data

    transform-core-aio:
        image: alfresco/alfresco-transform-core-aio:${TENGINE_TAG}
        mem_limit: 500m
        environment:
            JAVA_OPTS: " -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80"
            
    keycloak:
        image: keycloak/keycloak:${KEYCLOAK_TAG}
        command: "
            start --import-realm --hostname=${HOST_NAME}
              --hostname-port=8585
              --http-enabled=true
              --hostname-strict-https=false"
        environment:
          - KEYCLOAK_ADMIN=admin
          - KEYCLOAK_ADMIN_PASSWORD=admin
          - KC_HOSTNAME=keycloak
          - KC_DB=postgres
          - KC_DB_URL=jdbc:postgresql://postgres-idp:5432/keycloak
          - KC_DB_USERNAME=keycloak
          - KC_DB_PASSWORD=idp@1234
        volumes:
          - ./docker_image_build_cfg/keycloak:/opt/keycloak/data/import
        ports:
          - 8585:8080
        mem_limit: 500m
        depends_on:
          - postgres-idp
    
    postgres-idp:
        image: postgres:${POSTGRES_TAG}
        mem_limit: 500m
        environment:
            - POSTGRES_PASSWORD=idp@1234
            - POSTGRES_USER=keycloak
            - POSTGRES_DB=keycloak
        command: "
            postgres
              -c max_connections=200
              -c logging_collector=on
              -c log_min_messages=LOG
              -c log_directory=/var/log/postgresql"
        ports:
            - 5433:5432
        volumes:
          - ./data/postgres-idp/data:/var/lib/postgresql/data
          
    share:
        build:
          context: ./docker_image_build_cfg/share
          args:
            SHARE_TAG: ${SHARE_TAG}
        image: share
        container_name: share
        mem_limit: 500m
        environment:
            REPO_HOST: "alfresco"
            REPO_PORT: "8080"
            CSRF_FILTER_REFERER: "http://localhost:8080/.*"
            CSRF_FILTER_ORIGIN: "http://localhost:8080"
            JAVA_OPTS: "
                -Xms1744m -Xmx1744m
                -Dalfresco.context=alfresco
                -Dalfresco.protocol=http
                -Daims.resource=alfresco
                -Daims.enabled=true
                -Daims.realm=alfresco
                -Daims.enableBasicAuth=true
                -Daims.authServerUrl=http://keycloak:8080
                -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80
                "
        healthcheck:
            test: curl --fail http://share:8080/share/page || exit 1
            interval: 20s
            timeout: 10s
            retries: 3
            start_period: 30s
        labels:
          autoheal-share: "true" # Enable autoheal for this container as it sometimes have to get uma config from keycloak and fails during startup.

    autoheal:
        image: willfarrell/autoheal:latest
        tty: true
        container_name: autoheal
        restart: always
        volumes:
            - /etc/localtime:/etc/localtime:ro
            - /var/run/docker.sock:/var/run/docker.sock
        environment:
           AUTOHEAL_CONTAINER_LABEL: "autoheal-share" # Monitor containers with this label
      
    postgres:
        image: postgres:${POSTGRES_TAG}
        mem_limit: 500m
        environment:
            - POSTGRES_PASSWORD=alfresco
            - POSTGRES_USER=alfresco
            - POSTGRES_DB=alfresco
        command: "
            postgres
              -c max_connections=200
              -c logging_collector=on
              -c log_min_messages=LOG
              -c log_directory=/var/log/postgresql"
        ports:
            - 5432:5432
        volumes:
          - ./data/postgres/data:/var/lib/postgresql/data

    solr6:
        image: alfresco/alfresco-search-services:2.0.15
        mem_limit: 1g
        environment:
          # Solr needs to know how to register itself with Alfresco
          SOLR_ALFRESCO_HOST: "alfresco"
          SOLR_ALFRESCO_PORT: "8080"
          # Alfresco needs to know how to call solr
          SOLR_SOLR_HOST: "solr6"
          SOLR_SOLR_PORT: "8983"
          # Create the default alfresco and archive cores
          SOLR_CREATE_ALFRESCO_DEFAULTS: "alfresco,archive"
          # HTTPS or SECRET
          ALFRESCO_SECURE_COMMS: "secret"
          # SHARED SECRET VALUE
          JAVA_TOOL_OPTIONS: >-
            -Dalfresco.secureComms.secret=secret
        volumes:
            - ./data/search-services/data:/opt/alfresco-search-services/data

    activemq:
        image: alfresco/alfresco-activemq:${AMQ_TAG}
        mem_limit: 256m
        ports:
            - 8161:8161 # Web Console
            - 5672:5672 # AMQP
            - 61616:61616 # OpenWire
            - 61613:61613 # STOMP

    content-app:
        image: alfresco/alfresco-content-app:${ACA_TAG}
        environment:
            APP_CONFIG_OAUTH2_HOST: ${APP_CONFIG_OAUTH2_HOST}
            APP_CONFIG_AUTH_TYPE: ${APP_CONFIG_AUTH_TYPE}
            APP_CONFIG_OAUTH2_CLIENTID: ${APP_CONFIG_OAUTH2_CLIENTID}
            APP_CONFIG_OAUTH2_REDIRECT_SILENT_IFRAME_URI: ${APP_CONFIG_OAUTH2_REDIRECT_SILENT_IFRAME_URI}
            APP_CONFIG_OAUTH2_REDIRECT_LOGIN: ${APP_CONFIG_OAUTH2_REDIRECT_LOGIN}
            APP_CONFIG_OAUTH2_REDIRECT_LOGOUT: ${APP_CONFIG_OAUTH2_REDIRECT_LOGOUT}
            APP_CONFIG_OAUTH2_IMPLICIT_FLOW: ${APP_CONFIG_OAUTH2_IMPLICIT_FLOW}
            APP_CONFIG_OAUTH2_SILENT_LOGIN: ${APP_CONFIG_OAUTH2_SILENT_LOGIN}
        mem_limit: 256m
        depends_on:
            - alfresco
            - keycloak

    proxy:
        image: nginx:stable-alpine
        mem_limit: 128m
        depends_on:
            - alfresco
            - content-app
            - share
        volumes:
            - ./docker_image_build_cfg/proxy/local-nginx.conf:/etc/nginx/nginx.conf
        ports:
            - 8080:8080